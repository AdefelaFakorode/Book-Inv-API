//getting a single book
app.get("/books/:id", async (req, res) => {
  const bookId = parseInt(req.params.id, 10);
  try {
    const book = await query("SELECT * FROM bookinv WHERE id = $1", [bookId]);
    if (book.rows.length > 0) {
      res.status(200).json(book.rows[0]);
    } else {
      res.status(404).send({ message: "Book not found..." });
    }
  } catch (err) {
    console.error(err);
  }
}); //creating new book
app.post("/books", async (req, res) => {
  const { title, author, isbn, availibility } = req.body;
  try {
    const newBook = await query(
      "INSERT INTO bookinv(title, author, isbn, availibility) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11) RETURNING *",
      [title, author, isbn, availibility]
    );
    res.status(201).json(newBook.rows[0]);
  } catch (err) {
    console.error(err);
  }
}); //updating a book
app.patch("/books/:id", async (req, res) => {
  const jobId = parseInt(req.params.id, 10);
  const { title, author, isbn, availibility } = req.body;
  try {
    const updatedBook = await query(
      "UPDATE bookinv SET company = $1, title = $2, minSalary = $3, maxSalary = $4, location = $5, postDate = $6, jobPostUrl = $7, applicationDate = $8, lastContactDate = $9, companyContact = $10, status = $11 WHERE id = $12 RETURNING *",
      [title, author, isbn, availibility]
    );
    if (updatedBook.rows.length > 0) {
      res.status(200).json(updatedBook.rows[0]);
    } else {
      res.status(404).send({ message: "Book not found..." });
    }
  } catch (err) {
    console.error(err);
  }
}); //deleting a book
app.delete("/books/:id", async (req, res) => {
  const bookId = parseInt(req.params.id, 10);
  try {
    const deleteOp = await query("DELETE FROM job_applications WHERE id = $1", [
      bookId,
    ]);
    if (deleteOp.rowCount > 0) {
      res.status(200).send({ message: "Book deleted successfully..." });
    } else {
      res.status(404).send({ message: "Book not found..," });
    }
  } catch (err) {
    console.error(err);
  }
});